name: Advanced CI/CD Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test (Matrix Strategy)
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9, 3.10, 3.11]
      fail-fast: false

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Cache dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black mypy pytest pytest-cov codecov
        env:
          CI: true

      # Step 5: Run linting
      - name: Lint code with flake8
        run: flake8 .
      
      # Step 6: Format code with black (check mode)
      - name: Check code formatting with black
        run: black --check .

      # Step 7: Static type checking with mypy
      - name: Type check with mypy
        run: mypy .

      # Step 8: Run tests and measure coverage
      - name: Run tests and collect coverage
        run: |
          pytest --cov=mloptimizer --cov-report=xml --cov-report=term-missing
        env:
          CI: true

      # Step 9: Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Step 10: Upload artifacts (test and coverage reports)
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: ./test-reports/

  notify:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: build-and-test
    if: failure()
    steps:
      # Step 1: Send Slack notification for failure
      - name: Notify Slack of failure
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Workflow '${{ github.workflow }}' failed on branch '${{ github.ref_name }}'. Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
